name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up cache for Protobuf
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/bin/protoc
          ~/.cache/protobuf
        key: ${{ runner.os }}-protobuf-${{ hashFiles('/home/runner/.local/include/google/protobuf/descriptor.proto') }}
        restore-keys: |
          ${{ runner.os }}-protobuf-

    - name: Install Protobuf
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        # Install Protoc.
        wget https://github.com/protocolbuffers/protobuf/releases/download/v21.3/protoc-21.3-linux-x86_64.zip
        unzip -o protoc-21.3-linux-x86_64.zip -d ~/.local
    - name: Run fmt
      run: cargo fmt --check
    - name: Init docker-compose
      uses: hoverkraft-tech/compose-action@v2.0.1
      with:
        compose-file: "./server/docker-compose.yml"
    - name: Setup sqlx
      run: cargo install sqlx-cli && cd client/client_db/ && sqlx db create -D sqlite://dev.db && sqlx migrate run -D sqlite://dev.db && cd ../..
    - name: Build server
      run: DATABASE_URL=${{ secrets.DATABASE_URL_SERVER }} cargo build --bin server --verbose
    - name: Build client
      run: DATABASE_URL=${{ secrets.DATABASE_URL_CLIENT }} cargo build --bin client --verbose
    - name: Build common
      run: cargo build --lib --verbose
    - name: Run tests server
      run: DATABASE_URL=${{ secrets.DATABASE_URL_SERVER }} DATABASE_URL_TEST=${{ secrets.DATABASE_URL_SERVER_TEST }} REDIS_URL=${{ secrets.REDIS_URL }} cargo test --bin server --verbose
    - name: Run tests client
      run: DATABASE_URL=${{ secrets.DATABASE_URL_CLIENT }} DATABASE_URL_TEST="sqlite::memory:" cargo test --bin client --verbose
    - name: Run tests common
      run: cargo test --lib --verbose

